// server.js

const express = require('express');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// Sample data for books and users
let books = require('./booksdb.js'); // Assume this is your books database
let users = []; // In-memory user store for demonstration purposes

// Secret key for JWT
const JWT_SECRET = 'your_secret_key'; // Replace with a secure key in production

// Middleware to authenticate JWT tokens
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; // Bearer token

  if (!token) return res.sendStatus(401); // Unauthorized

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403); // Forbidden
    req.user = user;
    next();
  });
}

// Task 6: Register New User
app.post('/register', (req, res) => {
  const { username, password } = req.body;

  // Check if the username already exists
  const existingUser = users.find((user) => user.username === username);
  if (existingUser) {
    return res.status(400).json({ message: 'Username already exists' });
  }

  // Add the new user
  users.push({ username, password });
  res.status(201).json({ message: 'User registered successfully' });
});

// Task 7: Login as a Registered User
app.post('/login', (req, res) => {
  const { username, password } = req.body;

  // Authenticate user
  const user = users.find(
    (user) => user.username === username && user.password === password
  );
  if (!user) {
    return res.status(401).json({ message: 'Invalid credentials' });
  }

  // Generate JWT token
  const token = jwt.sign({ username }, JWT_SECRET);
  res.json({ message: 'Login successful', token });
});

// Task 10: Get All Books Using Async Callback Function
function getBooks(callback) {
  setTimeout(() => {
    callback(null, books);
  }, 1000); // Simulate async delay
}

app.get('/books', (req, res) => {
  getBooks((err, data) => {
    if (err) res.status(500).json({ error: err });
    else res.json(data);
  });
});

// Task 2 & 11: Get Books Based on ISBN Using Promises
function getBookByISBN(isbn) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const book = books[isbn];
      if (book) resolve(book);
      else reject('Book not found');
    }, 1000);
  });
}

app.get('/books/isbn/:isbn', (req, res) => {
  const isbn = req.params.isbn;
  getBookByISBN(isbn)
    .then((book) => res.json(book))
    .catch((err) => res.status(404).json({ error: err }));
});

// Task 3 & 12: Get All Books by Author Using Promises
function getBooksByAuthor(author) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const matchingBooks = Object.values(books).filter(
        (book) => book.author === author
      );
      if (matchingBooks.length > 0) resolve(matchingBooks);
      else reject('No books found by this author');
    }, 1000);
  });
}

app.get('/books/author/:author', (req, res) => {
  const author = req.params.author;
  getBooksByAuthor(author)
    .then((books) => res.json(books))
    .catch((err) => res.status(404).json({ error: err }));
});

// Task 4 & 13: Get All Books Based on Title Using Async/Await
function getBooksByTitle(title) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const matchingBooks = Object.values(books).filter(
        (book) => book.title === title
      );
      if (matchingBooks.length > 0) resolve(matchingBooks);
      else reject('No books found with this title');
    }, 1000);
  });
}

app.get('/books/title/:title', async (req, res) => {
  const title = req.params.title;
  try {
    const books = await getBooksByTitle(title);
    res.json(books);
  } catch (err) {
    res.status(404).json({ error: err });
  }
});

// Task 5: Get Book Review
app.get('/books/review/:isbn', (req, res) => {
  const isbn = req.params.isbn;
  const book = books[isbn];
  if (book && book.reviews) {
    res.json(book.reviews);
  } else {
    res.status(404).json({ message: 'No reviews found for this book' });
  }
});

// Task 8: Add/Modify a Book Review (Logged-in Users Only)
app.put('/auth/review/:isbn', authenticateToken, (req, res) => {
  const isbn = req.params.isbn;
  const review = req.body.review;
  const username = req.user.username;

  if (!books[isbn]) {
    return res.status(404).json({ message: 'Book not found' });
  }

  if (!books[isbn].reviews) {
    books[isbn].reviews = {};
  }

  books[isbn].reviews[username] = review;
  res.json({ message: 'Review added/updated successfully' });
});

// Task 9: Delete Book Review Added by That Particular User
app.delete('/auth/review/:isbn', authenticateToken, (req, res) => {
  const isbn = req.params.isbn;
  const username = req.user.username;

  if (books[isbn] && books[isbn].reviews && books[isbn].reviews[username]) {
    delete books[isbn].reviews[username];
    res.json({ message: 'Review deleted successfully' });
  } else {
    res.status(404).json({ message: 'Review not found' });
  }
});

// Task 6: Start the Server
app.listen(3000, () => {
  console.log('Server is running on port 3000');
});
